// Copyright 2011, Tencent Inc.
// Author: Hangjun Ye <hansye@tencent.com>
// Xiaokang Liu <hsiaokangliu@tencent.com>
//
// Implement a rpc-based "packet" stream.

package poppy.streaming;

import "poppy/rpc_option.proto";

enum ErrorCode {
    // User gets this error code only when we forget to set a proper error code.
    // It shouldn't happen.
    ERROR_UNKNOWN = -1;
    // The operation is successful and data is returned.
    ERROR_SUCCESSFUL = 0;
    // Stream id is invalid.
    ERROR_INVALID_STREAM = 1;
    // Try to read or write data to a closed stream.
    ERROR_STREAM_CLOSED = 2;
    // The protocol buffer message is invalid (missing required fields).
    ERROR_INVALID_PB_MESSAGE = 3;
    // The end of stream.
    ERROR_END_OF_STREAM = 4;
    // The underlying rpc failed.
    ERROR_RPC_FAILED = 5;
    // The operation(read/write/close) on the stream is timed out
    ERROR_STREAM_TIMEOUT = 6;
    // Unexpected packet arrives.
    ERROR_UNEXPECTED_PACKET_ARRIVED = 7;
    // Stream is aborted by upper application.
    ERROR_STREAM_ABORTED = 8;
};

message StreamOptions {
    // Timeout in milliseconds.
    optional int64 timeout = 1 [default = 10000];
    // Max total retry count on current stream.
    optional int64 retry_count = 2 [default = 100];
    optional poppy.CompressType compress_type = 3;
}

message CreateStreamRequest {
    optional StreamOptions options = 1;
}

message CreateStreamResponse {
    optional ErrorCode error_code = 1;
    optional int64 stream_id = 2;
    optional StreamOptions options = 3;
}

message CloseStreamRequest {
    optional int64 stream_id = 1;
    optional int64 packet_id = 2;
    // Error code on close: ERROR_END_OF_STREAM or ERROR_STREAM_ABORTED.
    optional ErrorCode error_code = 3 [default = ERROR_END_OF_STREAM];
}

message CloseStreamResponse {
    optional ErrorCode error_code = 1;
}

message DownloadPacketRequest {
    optional int64 stream_id = 1;
    // Id of the packet being downloaded.
    // It's possibly NOT set when we just want to send an acknowledgement.
    optional int64 packet_id = 2;
}

message DownloadPacketResponse {
    // No needs to set stream id and packet id in response as we could get it from
    // request.
    optional ErrorCode error_code = 1;
    optional bytes packet_payload = 2;
}

message UploadPacketRequest {
    optional int64 stream_id = 1;
    // Id of the packet being uploaded.
    optional int64 packet_id = 2;
    optional bytes packet_payload = 3;
}

message UploadPacketResponse {
    // No needs to set stream id and packet id in response as we could get it from
    // request.
    optional ErrorCode error_code = 1;
}

service StreamingService {
    rpc CreateInputStream(CreateStreamRequest) returns(CreateStreamResponse);
    rpc CreateOutputStream(CreateStreamRequest) returns(CreateStreamResponse);
    rpc CloseInputStream(CloseStreamRequest) returns(CloseStreamResponse);
    rpc CloseOutputStream(CloseStreamRequest) returns(CloseStreamResponse);
    rpc DownloadPacket(DownloadPacketRequest) returns(DownloadPacketResponse);
    rpc UploadPacket(UploadPacketRequest) returns(UploadPacketResponse);
}
