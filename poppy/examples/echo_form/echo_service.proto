package rpc_examples;

import "poppy/rpc_message.proto";
import "poppy/examples/echo_form/ad.proto";

enum TestEnum {
    V1 = 1;
    V2 = 2;
}

message NestedMsg {
    required int32 id = 1;
    optional string title = 2;
    optional string url = 3;
}

message EchoMessage {
    required int32 id = 1;
    optional string query = 2 [default = "test"];
    optional bool flag = 3;
    optional TestEnum test_enum = 4 [default = V1];
    required NestedMsg nested_msg = 5;
    repeated NestedMsg nested_msgs = 6;
    repeated int32 rep_int = 7;
    optional bytes b = 8;
    repeated bytes bs = 9;

    extensions 100 to 199;
}

extend EchoMessage {
    optional string query_ext = 100 [default = "test ext"];
    optional uint64 long_ext = 101;
}

// The server side serivce.
service EchoServer {
    rpc Echo(EchoMessage) returns(EchoMessage);
    rpc EchoEmpty(poppy.EmptyRequest) returns(poppy.EmptyResponse);

    // from ad_public.proto
    rpc TestTimeTarget(poppy.examples.ad.TimeTarget) returns (poppy.examples.ad.TimeTarget);
    rpc TestAreaTarget(poppy.examples.ad.AreaTarget) returns (poppy.examples.ad.AreaTarget);
    rpc TestIPTarget(poppy.examples.ad.IPTarget) returns (poppy.examples.ad.IPTarget);
    rpc TestWordTarget(poppy.examples.ad.WordTarget) returns (poppy.examples.ad.WordTarget);
    rpc TestClassTarget(poppy.examples.ad.ClassTarget) returns (poppy.examples.ad.ClassTarget);
    rpc TestBidWord(poppy.examples.ad.BidWord) returns (poppy.examples.ad.BidWord);
    rpc TestCreative(poppy.examples.ad.Creative) returns (poppy.examples.ad.Creative);
    rpc TestBrandZone(poppy.examples.ad.BrandZone) returns (poppy.examples.ad.BrandZone);
    rpc TestBrandCreative(poppy.examples.ad.BrandCreative) returns (poppy.examples.ad.BrandCreative);
    rpc TestAdGroup(poppy.examples.ad.AdGroup) returns (poppy.examples.ad.AdGroup);
    rpc TestAdCampaign(poppy.examples.ad.AdCampaign) returns (poppy.examples.ad.AdCampaign);
    rpc TestAdvertiser(poppy.examples.ad.Advertiser) returns (poppy.examples.ad.Advertiser);
    rpc TestPubHeader(poppy.examples.ad.PubHeader) returns (poppy.examples.ad.PubHeader);
    rpc TestPubRecord(poppy.examples.ad.PubRecord) returns (poppy.examples.ad.PubRecord);
    rpc TestInvalidValid(poppy.examples.ad.InvalidValid) returns (poppy.examples.ad.InvalidValid);
    rpc TestInvalidValidNotify(poppy.examples.ad.InvalidValidNotify) returns (poppy.examples.ad.InvalidValidNotify);
    rpc TestPubSlice(poppy.examples.ad.PubSlice) returns (poppy.examples.ad.PubSlice);
    rpc TestPubSequence(poppy.examples.ad.PubSequence) returns (poppy.examples.ad.PubSequence);
    rpc TestModifiedId(poppy.examples.ad.ModifiedId) returns (poppy.examples.ad.ModifiedId);
    rpc TestModifiedIdNotify(poppy.examples.ad.ModifiedIdNotify) returns (poppy.examples.ad.ModifiedIdNotify);
    rpc TestInvalidIdNotifyResponse(poppy.examples.ad.InvalidIdNotifyResponse) returns (poppy.examples.ad.InvalidIdNotifyResponse);
}

