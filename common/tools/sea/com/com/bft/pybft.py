# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pybft', [dirname(__file__)])
        except ImportError:
            import _pybft
            return _pybft
        if fp is not None:
            try:
                _mod = imp.load_module('_pybft', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pybft = swig_import_helper()
    del swig_import_helper
else:
    import _pybft
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


MAX_BUF_SIZE = _pybft.MAX_BUF_SIZE
MAX_ERROR_BUF_SIZE = _pybft.MAX_ERROR_BUF_SIZE

def init_log():
  return _pybft.init_log()
init_log = _pybft.init_log

def set_bftLogPath(*args):
  return _pybft.set_bftLogPath(*args)
set_bftLogPath = _pybft.set_bftLogPath
class CBFT(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CBFT, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CBFT, name)
    __repr__ = _swig_repr
    __swig_setmethods__["instance"] = _pybft.CBFT_instance_set
    __swig_getmethods__["instance"] = _pybft.CBFT_instance_get
    if _newclass:instance = _swig_property(_pybft.CBFT_instance_get, _pybft.CBFT_instance_set)
    __swig_setmethods__["_isBig"] = _pybft.CBFT__isBig_set
    __swig_getmethods__["_isBig"] = _pybft.CBFT__isBig_get
    if _newclass:_isBig = _swig_property(_pybft.CBFT__isBig_get, _pybft.CBFT__isBig_set)
    def __init__(self, *args): 
        this = _pybft.new_CBFT(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pybft.delete_CBFT
    __del__ = lambda self : None;
    def load_template(self, *args): return _pybft.CBFT_load_template(self, *args)
    def load_data(self, *args): return _pybft.CBFT_load_data(self, *args)
    def dump_data(self, *args): return _pybft.CBFT_dump_data(self, *args)
    def next(self): return _pybft.CBFT_next(self)
    def export_bin(self, key = ""): return _pybft.CBFT_export_bin(self, key)
    def import_bin(self, *args): return _pybft.CBFT_import_bin(self, *args)
    def export_json(self): return _pybft.CBFT_export_json(self)
    def import_json(self, *args): return _pybft.CBFT_import_json(self, *args)
    def length(self, *args): return _pybft.CBFT_length(self, *args)
    def option_on(self, *args): return _pybft.CBFT_option_on(self, *args)
    def option_off(self, *args): return _pybft.CBFT_option_off(self, *args)
    def alias(self, *args): return _pybft.CBFT_alias(self, *args)
    def get(self, *args): return _pybft.CBFT_get(self, *args)
    def set(self, *args): return _pybft.CBFT_set(self, *args)
    def dset(self, *args): return _pybft.CBFT_dset(self, *args)
    def size_of(self, *args): return _pybft.CBFT_size_of(self, *args)
    def list(self, filename = "", key = ""): return _pybft.CBFT_list(self, filename, key)
    def listall(self, filename = "", key = ""): return _pybft.CBFT_listall(self, filename, key)
    def list2buf(self, key = ""): return _pybft.CBFT_list2buf(self, key)
    def listall2buf(self, key = ""): return _pybft.CBFT_listall2buf(self, key)
    def hasKey(self, key = ""): return _pybft.CBFT_hasKey(self, key)
CBFT_swigregister = _pybft.CBFT_swigregister
CBFT_swigregister(CBFT)
cvar = _pybft.cvar

def open_bft_log(threadName = ""):
  return _pybft.open_bft_log(threadName)
open_bft_log = _pybft.open_bft_log



