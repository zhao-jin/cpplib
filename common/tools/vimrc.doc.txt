对于 common/tools/.vimrc 的说明

需要 vim 7 及以上版本。

本 .vimrc 的功能：

* 快捷键绑定：
** F2 消除查找高亮
** F3 上一个错误
** F4 下一个错误
** F5 Blade
** F9 切换构建错误信息的QuickFix窗口
** F11 切换粘贴/非粘贴模式

* 修正的问题
** 修正了默认的模板缩进的问题。
** 根据 R2 代码规范，namespace 不缩进。

* 自动命令
** 保存时，自动删除行尾多余空格。
** 保存时，自动修正DOS/Unix混合行尾的源文件。
** 创建 *.h 文件时，自动加入 #ifdef #define #endif guard
** 创建 *_test.cpp 时，自动 #include "thirdparty/gtest/gtest.h"
** 高亮显示 GLOG 日志行（警告：黄色，错误：红色，FATAL：红底白字）
** 识别 proto 文件语法
** 识别 BUILD 文件语法

* 自定义命令，可以再冒号模式调用：
  主要是把运行结果整合进了 QuickFix 模式，以加快修改代码的速度。
** :Blade 调用 blade 构建程序，可带参数，快捷键 <F5>
** :CppLint 调用  cpplint.py 检查代码风格。
** :ViewComments <issueid> 直接定位 codereview.oa.com 上的评论到源代码行。
** :PyCheck 执行 pychecker (Python 的代码检查工具)，并整合进 QuciFix

=============================================================================
QuciFix 的帮助信息：
:help quickfix

1. 使用 QuickFix 命令                   quickfix Quickfix E42

Vim 有一个特殊的模式用来加快 编辑-编译-编辑 循环。这是受到 Amiga 系统上 Manx
的 Aztec C 编译器的 quickfix 选项的启发。它会将编译器产生的出错信息保存到一个
文件中并用 Vim 跳转到各个错误。无需记住所有的出错信息，你可以检查每一个错误并
对其修正。

Vim 里，quickfix 命令的使用更广泛，它可以找到文件各种位置的列表。例如，
:vimgrep 寻找模式的匹配。在脚本里，用 getqflist() 函数可以得到这些位置。这
样你可以比编辑/编译/修正循环做更多的事情！

如果你是在 Amiga 系统上使用 Manx 的 Aztec C 编译器，参考 quickfix-manx 以配
合 Vim 使用。如果使用其它的编译器，你需要将出错信息保存到一个文件中然后用
"Vim -q filename" 启动 Vim。一个简便的方法是使用 :make 命令 (见下)。你需要设
定 'errorformat'，使其和编译器产生的出错信息格式一致 (见 errorformat)。
